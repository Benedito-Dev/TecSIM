import { GoogleGenerativeAI } from "@google/generative-ai";
import { API_KEY } from '@env';
import { verificarGatilhoCritico, detectarTemaForaDaSaude } from '../utils/filters';

// Configura√ß√£o segura da chave de API
if (!API_KEY) {
  throw new Error("Chave de API n√£o configurada. Configure a vari√°vel de ambiente REACT_APP_GOOGLE_API_KEY ou GOOGLE_API_KEY.");
}

const genAI = new GoogleGenerativeAI(API_KEY);

// Cache para modelos dispon√≠veis
let cachedModels = null;
const CACHE_EXPIRATION_MS = 3600000; // 1 hora

export const listAvailableModels = async () => {
  try {
    if (cachedModels && (Date.now() - cachedModels.timestamp) < CACHE_EXPIRATION_MS) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true
      };
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${API_KEY}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Erro ao listar modelos:", errorData);
      throw new Error(`Falha ao buscar modelos: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const data = await response.json();

    cachedModels = {
      data: data.models,
      timestamp: Date.now()
    };

    return {
      success: true,
      models: data.models
    };

  } catch (error) {
    console.error("Erro ao listar modelos:", error);

    if (cachedModels) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true,
        warning: "Dados podem estar desatualizados devido a erro na requisi√ß√£o"
      };
    }

    return {
      success: false,
      error: error.message || "Erro ao listar modelos dispon√≠veis"
    };
  }
};

export const getAIResponse = async (message, history = [], options = {}) => {
  if (typeof message !== 'string' || message.trim() === '') {
    return {
      success: false,
      error: "A mensagem n√£o pode estar vazia"
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Gatilhos cr√≠ticos
  if (verificarGatilhoCritico(message)) {
    return {
      success: true,
      response: "‚ö†Ô∏è Com base no que voc√™ relatou, √© muito importante que procure imediatamente um m√©dico ou profissional de sa√∫de qualificado."
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Temas fora da sa√∫de
  if (detectarTemaForaDaSaude(message)) {
    return {
      success: true,
      response: "‚ö†Ô∏è Sou um assistente virtual de sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos. Para outros temas, recomendo buscar fontes apropriadas."
    };
  }

  try {
    const defaultOptions = {
      modelName: "gemini-1.5-flash",
      apiVersion: "v1beta",
      maxOutputTokens: 2000,
      temperature: 0.7,
      topP: 0.9,
      topK: 40,
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const finalOptions = { ...defaultOptions, ...options };

    console.log(`Usando modelo: ${finalOptions.modelName} com configura√ß√µes:`, finalOptions);

    const genAI = new GoogleGenerativeAI(API_KEY, {
      apiVersion: finalOptions.apiVersion
    });

    const model = genAI.getGenerativeModel({
      model: finalOptions.modelName,
      generationConfig: {
        maxOutputTokens: finalOptions.maxOutputTokens,
        temperature: finalOptions.temperature,
        topP: finalOptions.topP,
        topK: finalOptions.topK,
      },
      safetySettings: finalOptions.safetySettings
    });

    const systemRules = `Voc√™ √© o TecSim, assistente virtual de sa√∫de. Seu √∫nico objetivo √© ajudar com informa√ß√µes m√©dicas b√°sicas de forma clara, segura e respons√°vel. Siga rigorosamente estas diretrizes:

1. Nunca ofere√ßa diagn√≥sticos ou tratamentos.
2. Sempre recomende que o usu√°rio procure um m√©dico ou profissional de sa√∫de qualificado.
3. Responda apenas d√∫vidas simples, comuns e leves, como por exemplo: dor de cabe√ßa ocasional, gases, c√≥lica leve, dor nas costas moderada ou uso b√°sico de medicamentos populares (ex: paracetamol, dipirona, sal de frutas) ‚Äî sempre com cautela.
4. Caso perceba que:
  - o sintoma √© frequente, persistente ou intenso;
  - existe uma combina√ß√£o de sintomas;
  - o usu√°rio relata algo grave ou usa termos como "urgente", "desesperado", "n√£o aguento", "muito forte";
  - ou menciona situa√ß√µes espec√≠ficas como gravidez, sa√∫de mental, uso de subst√¢ncias legais, doen√ßas cr√¥nicas ou qualquer condi√ß√£o de risco,

  ent√£o oriente de forma clara e direta: ‚ÄúProcure imediatamente um m√©dico ou profissional de sa√∫de qualificado.‚Äù N√£o continue a conversa al√©m disso.

5. √â permitido mencionar medicamentos comuns e naturais, apenas como exemplo, e apenas se houver uso seguro e reconhecido para o sintoma relatado. Nunca mencione antibi√≥ticos, controlados ou qualquer subst√¢ncia que exija receita m√©dica.
6. Evite termos t√©cnicos. Use linguagem intermedi√°ria, acess√≠vel ao p√∫blico geral.
7. Nunca incentive automedica√ß√£o.
8. N√£o forne√ßa conselhos para uso prolongado ou repetido de medicamentos.
9. Se o tema da conversa fugir da √°rea m√©dica (ex: pol√≠tica, esportes, religi√£o, entretenimento, etc.), responda com respeito dizendo:

‚ÄúSou um assistente virtual de sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos. Para outros temas, recomendo buscar fontes apropriadas.‚Äù

10. Seja sempre educado, direto, objetivo e respons√°vel. Nunca use linguagem amb√≠gua ou que possa ser interpretada como recomenda√ß√£o m√©dica.

Seu papel √© informativo, nunca substitutivo √† orienta√ß√£o profissional.`;

    let chatHistory = [];
    if (Array.isArray(history) && history.length > 0) {
      chatHistory = history.map(msg => ({
        role: msg.isBot ? "model" : "user",
        parts: [{ text: msg.text }]
      }));
    }

    const chat = model.startChat({ history: chatHistory });

    let userMessageContent = message.trim();
    if (history.length === 0 && systemRules && !userMessageContent.startsWith(systemRules.trim())) {
      userMessageContent = systemRules + userMessageContent;
    }

    const result = await chat.sendMessage(userMessageContent);
    const responseText = await result.response.text();

    return {
      success: true,
      response: responseText
    };

  } catch (error) {
    console.error("Erro detalhado:", error);

    let errorMessage = "Erro ao processar sua solicita√ß√£o";
    if (error.message?.includes('not found for API version')) {
      errorMessage = "Modelo n√£o dispon√≠vel. Tente usar 'gemini-pro'";
    }

    return {
      success: false,
      error: errorMessage,
      details: error.message
    };
  }
};

export const checkAPIHealth = async () => {
  try {
    const modelsResponse = await listAvailableModels();

    if (!modelsResponse.success) {
      return {
        healthy: false,
        message: "Falha ao conectar com a API",
        error: modelsResponse.error
      };
    }

    return {
      healthy: true,
      message: "API operacional",
      models: modelsResponse.models.length
    };
  } catch (error) {
    return {
      healthy: false,
      message: "Erro ao verificar sa√∫de da API",
      error: error.message
    };
  }
};
