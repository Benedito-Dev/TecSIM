import React, { useState, useContext, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

import Sidebar from '../../components/SideBarr';
import ChatHeader from '../../components/chat/ChatHeader';
import ChatHeaderNovosUsuarios from '../../components/chat/ChatHeaderNovosUsuarios';
import MessageList from '../../components/chat/MessageList';
import QuickActions from '../../components/chat/QuickActions';
import ChatInput from '../../components/chat/ChatInput';

import { useAuth } from '../../context/UserContext';
import { ThemeContext } from '../../context/ThemeContext';
import { useTriagem } from '../../hooks/useTriagem';
import { useChatMessages } from '../../hooks/useChatMessages';
import { getAIResponse } from '../../services/aiService';
import { protocolosGeneralizados } from '../../utils/protocolosGeneralizados';

export default function ChatScreen() {
  const { user } = useAuth();
  const { theme } = useContext(ThemeContext);
  const navigate = useNavigate();
  const location = useLocation();
  
  const [newMessage, setNewMessage] = useState('');
  const [usuarioInfo, setUsuarioInfo] = useState(null);
  const [protocoloAtivo, setProtocoloAtivo] = useState(null);
  const [etapaProtocolo, setEtapaProtocolo] = useState(0);
  const [dadosCliente, setDadosCliente] = useState({});
  
  const {
    messages,
    isLoading,
    setIsLoading,
    messagesEndRef,
    addUserMessage,
    addBotMessage,
    addTriageMessage,
    getFormattedHistory
  } = useChatMessages();

  const {
    emTriagem,
    iniciarProcessoTriagem,
    processarResposta,
  } = useTriagem();

  // Inicializa√ß√£o autom√°tica do protocolo farmac√™utico
  useEffect(() => {
    // Sempre inicia como farmac√™utico
    setUsuarioInfo({ tipo: 'farmaceutico' });
    
    // Inicia protocolo automaticamente
    setTimeout(() => {
      setEtapaProtocolo(1);
      addBotMessage(
        `üíä **TecSim - Protocolo Farmac√™utico**\n\n` +
        `**ETAPA 1: IDENTIFICA√á√ÉO DO CLIENTE**\n\n` +
        `üîç **Pergunte ao cliente:**\n\n` +
        `üìã **"Qual seu CPF?"** (para buscar no sistema)\n` +
        `üë§ **"Qual seu nome completo?"**\n` +
        `üéÇ **"Qual sua idade?"**\n` +
        `‚ö†Ô∏è **"Tem alguma alergia conhecida?"**\n` +
        `üíä **"Toma algum medicamento controlado?"**\n` +
        `üè• **"Tem alguma doen√ßa cr√¥nica?"**\n\n` +
        `**Digite as informa√ß√µes coletadas ou 'pr√≥ximo' para continuar**`
      );
    }, 1000);
  }, []);

  // Processamento das etapas do protocolo farmac√™utico
  const processarEtapaProtocolo = async (mensagem) => {
    const msg = mensagem.toLowerCase();
    
    switch (etapaProtocolo) {
      case 1: // IDENTIFICA√á√ÉO
        if (msg.includes('pr√≥ximo') || msg.includes('proximo')) {
          setEtapaProtocolo(2);
          addBotMessage(
            `**ETAPA 2: AVALIA√á√ÉO DOS SINTOMAS**\n\n` +
            `ü§í **Pergunte ao cliente:**\n\n` +
            `üî¥ **"O que voc√™ est√° sentindo?"** (sintoma principal)\n` +
            `‚è∞ **"H√° quanto tempo come√ßou?"**\n` +
            `üå°Ô∏è **"Tem febre?"** (medir se poss√≠vel)\n` +
            `üìä **"De 1 a 10, qual a intensidade?"**\n` +
            `üíä **"J√° tomou algo para isso?"**\n` +
            `üîÑ **"J√° teve isso antes?"**\n` +
            `‚ûï **"Tem outros sintomas junto?"**\n\n` +
            `**Digite os sintomas relatados pelo cliente:**`
          );
        } else {
          setDadosCliente(prev => ({ ...prev, identificacao: mensagem }));
          addBotMessage(
            `‚úÖ **Dados do cliente registrados!**\n\n` +
            `üìù **Informa√ß√µes coletadas:**\n${mensagem}\n\n` +
            `Digite 'pr√≥ximo' para continuar para avalia√ß√£o dos sintomas.`
          );
        }
        return true;
        
      case 2: // AVALIA√á√ÉO DOS SINTOMAS
        setDadosCliente(prev => ({ ...prev, sintomas: mensagem }));
        setEtapaProtocolo(3);
        
        const contextoAnalise = `
PROTOCOLO FARMAC√äUTICO - AN√ÅLISE:
Dados do cliente: ${dadosCliente.identificacao}
Sintomas relatados: ${mensagem}

Como farmac√™utico experiente, forne√ßa:

1. **ELIMINA√á√ÉO DIFERENCIAL:**
   - 3 poss√≠veis causas mais prov√°veis
   - Causas que devem ser descartadas

2. **PERGUNTAS ADICIONAIS:**
   - Que perguntas fazer para confirmar/descartar causas
   - Sinais espec√≠ficos para observar

3. **SINAIS DE ALERTA:**
   - Quando encaminhar IMEDIATAMENTE ao m√©dico
   - Red flags para este sintoma

4. **SUGEST√ïES TERAP√äUTICAS:**
   - Medicamentos de venda livre apropriados
   - Dosagens seguras
   - Contraindica√ß√µes importantes

5. **ORIENTA√á√ïES N√ÉO FARMACOL√ìGICAS:**
   - Medidas caseiras seguras
   - Quando retornar

Formato: Resposta pr√°tica para farmac√™utico`;
        
        const formattedHistory = getFormattedHistory();
        const aiResponse = await getAIResponse(contextoAnalise, formattedHistory);
        
        if (aiResponse.success) {
          addBotMessage(
            `**ETAPA 3: AN√ÅLISE E ORIENTA√á√ÉO**\n\n` +
            `${aiResponse.response}\n\n` +
            `üíä **Apresente as op√ß√µes ao cliente conforme orienta√ß√£o acima**\n` +
            `**Digite 'pr√≥ximo' quando terminar a apresenta√ß√£o**`
          );
        }
        return true;
        
      case 3: // APRESENTA√á√ÉO DE SOLU√á√ïES
        setEtapaProtocolo(4);
        addBotMessage(
          `**ETAPA 4: RESOLU√á√ÉO DE D√öVIDAS**\n\n` +
          `ü§î **Esclare√ßa todas as d√∫vidas do cliente:**\n\n` +
          `‚Ä¢ Como usar o medicamento?\n` +
          `‚Ä¢ Efeitos colaterais poss√≠veis?\n` +
          `‚Ä¢ Intera√ß√µes medicamentosas?\n` +
          `‚Ä¢ Quando retornar se n√£o melhorar?\n\n` +
          `**Digite as d√∫vidas do cliente ou 'pr√≥ximo':**`
        );
        return true;
        
      case 4: // RESOLU√á√ÉO DE D√öVIDAS
        if (!msg.includes('pr√≥ximo') && !msg.includes('proximo')) {
          const contextoDuvidas = `
D√öVIDAS DO CLIENTE:
${mensagem}

Sintomas originais: ${dadosCliente.sintomas}
Dados do cliente: ${dadosCliente.identificacao}

Forne√ßa respostas claras e seguras para as d√∫vidas, sempre priorizando a seguran√ßa do paciente.`;
          
          const formattedHistory = getFormattedHistory();
          const aiResponse = await getAIResponse(contextoDuvidas, formattedHistory);
          
          if (aiResponse.success) {
            addBotMessage(
              `üí¨ **Respostas para o cliente:**\n\n${aiResponse.response}\n\n` +
              `Digite 'pr√≥ximo' para finalizar o atendimento.`
            );
          }
        } else {
          setEtapaProtocolo(5);
          addBotMessage(
            `**ETAPA 5: A√á√ÉO E ENCERRAMENTO**\n\n` +
            `üéØ **Pr√≥ximos passos para o cliente:**\n\n` +
            `‚Ä¢ Finalize a venda se houver\n` +
            `‚Ä¢ Oriente sobre uso correto\n` +
            `‚Ä¢ Informe quando retornar\n` +
            `‚Ä¢ Entregue orienta√ß√µes por escrito\n\n` +
            `**Digite 'finalizar' para gerar o protocolo:**`
          );
        }
        return true;
        
      case 5: // A√á√ÉO E ENCERRAMENTO
        setEtapaProtocolo(6);
        const numeroProtocolo = `TEC${Date.now().toString().slice(-6)}`;
        
        addBotMessage(
          `**ETAPA 6: REGISTRO E ACOMPANHAMENTO**\n\n` +
          `‚úÖ **ATENDIMENTO FINALIZADO**\n\n` +
          `üìù **PROTOCOLO: ${numeroProtocolo}**\n\n` +
          `**RESUMO DO ATENDIMENTO:**\n` +
          `‚Ä¢ Cliente: ${dadosCliente.identificacao || 'N√£o informado'}\n` +
          `‚Ä¢ Sintomas: ${dadosCliente.sintomas || 'N√£o informados'}\n` +
          `‚Ä¢ Data: ${new Date().toLocaleDateString('pt-BR')}\n` +
          `‚Ä¢ Hor√°rio: ${new Date().toLocaleTimeString('pt-BR')}\n\n` +
          `üìû **Informe ao cliente:**\n` +
          `"Seu protocolo √© ${numeroProtocolo}. Guarde este n√∫mero para acompanhamento."\n\n` +
          `üîÑ **Digite 'novo' para iniciar novo atendimento**`
        );
        return true;
        
      case 6: // REINICIAR
        if (msg.includes('novo')) {
          setEtapaProtocolo(1);
          setDadosCliente({});
          addBotMessage(
            `üÜï **NOVO ATENDIMENTO INICIADO**\n\n` +
            `**ETAPA 1: IDENTIFICA√á√ÉO DO CLIENTE**\n\n` +
            `üîç **Pergunte ao cliente:**\n\n` +
            `üìã **"Qual seu CPF?"** (para buscar no sistema)\n` +
            `üë§ **"Qual seu nome completo?"**\n` +
            `üéÇ **"Qual sua idade?"**\n` +
            `‚ö†Ô∏è **"Tem alguma alergia conhecida?"**\n` +
            `üíä **"Toma algum medicamento controlado?"**\n` +
            `üè• **"Tem alguma doen√ßa cr√¥nica?"**\n\n` +
            `**Digite as informa√ß√µes coletadas ou 'pr√≥ximo' para continuar**`
          );
        }
        return true;
        
      default:
        return false;
    }
  };

  // L√≥gica de envio de mensagem
  const handleSendMessage = async (messageText = newMessage) => {
    if (!messageText.trim() || isLoading) return;

    addUserMessage(messageText.trim());
    setNewMessage('');
    setIsLoading(true);

    try {
      // Protocolo estruturado para farmac√™uticos
      if (usuarioInfo?.tipo === 'farmaceutico' && etapaProtocolo > 0 && !emTriagem) {
        const proximaEtapa = await processarEtapaProtocolo(messageText.trim());
        if (proximaEtapa) {
          setIsLoading(false);
          return;
        }
      }

      // Verifica se deve iniciar triagem
      if (!emTriagem) {
        const resultadoTriagem = iniciarProcessoTriagem(messageText.trim());
        if (resultadoTriagem.sucesso) {
          addTriageMessage(
            `üîç **Iniciando Triagem: ${resultadoTriagem.protocolo.nome}**\n\n${resultadoTriagem.primeiraPergunta.pergunta}`
          );
          setIsLoading(false);
          return;
        }
      }

      // Se est√° em triagem, processa como resposta da triagem
      if (emTriagem) {
        const resultado = await processarResposta(messageText.trim());
        if (resultado.sucesso) {
          if (resultado.finalizada) {
            // Triagem finalizada
            const { classificacao, response } = resultado.analise;
            let mensagemFinal = '';
            
            if (resultado.analise.success) {
              mensagemFinal = `üìã **RELAT√ìRIO DE TRIAGEM**\n\n` +
                `üî∏ **Classifica√ß√£o**: ${classificacao.icone} ${classificacao.nivel}\n` +
                `üî∏ **Recomenda√ß√£o**: ${classificacao.recomendacao}\n` +
                `üî∏ **Tempo**: ${classificacao.tempo}\n\n` +
                `**Resumo**: ${response}\n\n`;
              
              // Para farmac√™uticos, adiciona op√ß√µes de encaminhamento
              if (usuarioInfo?.tipo === 'farmaceutico') {
                mensagemFinal += `\nüè• **ENCAMINHAMENTOS SUGERIDOS:**\n`;
                
                if (classificacao.nivel.includes('URGENTE') || classificacao.nivel.includes('EMERG√äNCIA')) {
                  mensagemFinal += `‚Ä¢ üö® **Pronto Socorro** - Procure imediatamente\n`;
                } else if (classificacao.nivel.includes('M√âDICO')) {
                  mensagemFinal += `‚Ä¢ üë®‚Äç‚öïÔ∏è **Cl√≠nico Geral** - Consulta em at√© 24h\n`;
                }
                
                // Sugest√µes de especialistas baseadas nos sintomas
                const especialistas = protocolosGeneralizados.sugerirEspecialistas(messageText);
                especialistas.forEach(esp => {
                  mensagemFinal += `‚Ä¢ ${esp.icone} **${esp.nome}** - ${esp.motivo}\n`;
                });
              }
              
              mensagemFinal += `\n‚ö†Ô∏è *Este √© um sistema de triagem inicial e n√£o substitui avalia√ß√£o m√©dica profissional.*`;
            } else {
              mensagemFinal = `üìã **TRIAGEM FINALIZADA**\n\n` +
                `Classifica√ß√£o: ${classificacao.icone} ${classificacao.nivel}\n` +
                `Recomenda√ß√£o: ${classificacao.recomendacao}\n\n` +
                `‚ö†Ô∏è *Procure um profissional de sa√∫de para avalia√ß√£o detalhada.*`;
            }
            
            addTriageMessage(mensagemFinal, true);
          } else {
            // Continua triagem
            addTriageMessage(resultado.proximaPergunta.pergunta);
          }
          setIsLoading(false);
          return;
        }
      }

      // Fluxo normal da IA (fora do protocolo)
      const formattedHistory = getFormattedHistory();
      const aiResponse = await getAIResponse(messageText.trim(), formattedHistory);

      if (aiResponse.success) {
        addBotMessage(aiResponse.response);
      } else {
        throw new Error(aiResponse.error);
      }
    } catch (err) {
      console.error('Erro:', err);
      addBotMessage('‚ö†Ô∏è Ocorreu um erro ao processar sua mensagem. Tente novamente.');
      
      if (err.message.includes('API key') || err.message.includes('chave')) {
        alert('Erro: Problema com a chave de API. Verifique as configura√ß√µes.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickActionPress = (message) => {
    setNewMessage(message);
    setTimeout(() => handleSendMessage(message), 150);
  };

  const handleGoBack = () => navigate('/dashboard');

  return (
    <div 
      className="flex flex-col h-screen font-sans"
      style={{ background: theme.background }}
    >
      <Sidebar />
      
      <div className="flex flex-col flex-1 h-screen transition-all duration-300">
        {usuarioInfo?.tipo === 'farmaceutico' ? (
          <ChatHeaderNovosUsuarios 
            onGoBack={handleGoBack}
            isLoading={isLoading}
            emTriagem={emTriagem}
            protocoloAtivo={protocoloAtivo}
          />
        ) : (
          <ChatHeader 
            onGoBack={handleGoBack}
            isLoading={isLoading}
            emTriagem={emTriagem}
          />
        )}

        <MessageList 
          messages={messages}
          isLoading={isLoading}
          messagesEndRef={messagesEndRef}
        />

        <div 
          className="flex-shrink-0 w-full border-t"
          style={{
            background: theme.backgroundCard,
            borderColor: theme.border
          }}
        >
          <QuickActions 
            onButtonPress={handleQuickActionPress} 
            isLoading={isLoading} 
          />

          <ChatInput 
            message={newMessage}
            setMessage={setNewMessage}
            onSend={handleSendMessage}
            isLoading={isLoading}
            emTriagem={emTriagem}
          />
        </div>
      </div>
    </div>
  );
}