import { GoogleGenerativeAI } from "@google/generative-ai";
import { verificarGatilhoCritico, detectarTemaForaDaSaude, validarMencaoMedicamentos } from '../utils/filters';

// ‚úÖ Configura√ß√£o correta para React puro
const API_KEY = import.meta.env.VITE_GOOGLE_API_KEY;

if (!API_KEY) {
  throw new Error("Chave de API n√£o configurada. Configure a vari√°vel VITE_GOOGLE_API_KEY no arquivo .env");
}

// Cache para modelos dispon√≠veis
let cachedModels = null;
const CACHE_EXPIRATION_MS = 3600000; // 1 hora

// Fun√ß√£o para sanitizar o hist√≥rico de conversa
const sanitizarHistorico = (historico) => {
  if (!Array.isArray(historico)) return [];
  
  return historico.filter(msg => {
    if (msg.isBot) {
      // Remove mensagens do bot que contenham temas proibidos
      return !detectarTemaForaDaSaude(msg.text);
    }
    return true; // Mant√©m todas as mensagens do usu√°rio
  });
};

export const listAvailableModels = async () => {
  try {
    if (cachedModels && (Date.now() - cachedModels.timestamp) < CACHE_EXPIRATION_MS) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true
      };
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${API_KEY}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Erro ao listar modelos:", errorData);
      throw new Error(`Falha ao buscar modelos: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const data = await response.json();

    cachedModels = {
      data: data.models,
      timestamp: Date.now()
    };

    return {
      success: true,
      models: data.models
    };

  } catch (error) {
    console.error("Erro ao listar modelos:", error);

    if (cachedModels) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true,
        warning: "Dados podem estar desatualizados devido a erro na requisi√ß√£o"
      };
    }

    return {
      success: false,
      error: error.message || "Erro ao listar modelos dispon√≠veis"
    };
  }
};

export const getAIResponse = async (message, history = [], options = {}) => {
  // Log de auditoria para monitorar tentativas
  console.log(`[AUDIT] Tentativa de mensagem: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}`);

  if (typeof message !== 'string' || message.trim() === '') {
    return {
      success: false,
      error: "A mensagem n√£o pode estar vazia"
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Gatilhos cr√≠ticos
  if (verificarGatilhoCritico(message)) {
    console.warn('[AUDIT] Gatilho cr√≠tico detectado');
    return {
      success: true,
      response: "‚ö†Ô∏è Com base no que voc√™ relatou, √© muito importante que procure imediatamente um m√©dico ou profissional de sa√∫de qualificado."
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Temas fora da sa√∫de
  if (detectarTemaForaDaSaude(message)) {
    console.warn('[AUDIT] Tema proibido detectado:', message);
    return {
      success: true,
      response: "‚ö†Ô∏è Sou um assistente virtual de sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos. Para outros temas, recomendo buscar fontes apropriadas."
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Medicamentos controlados
  if (validarMencaoMedicamentos(message)) {
    console.warn('[AUDIT] Men√ß√£o a medicamento controlado detectada');
    return {
      success: true,
      response: "‚ö†Ô∏è N√£o posso discutir medicamentos controlados ou que exigem prescri√ß√£o m√©dica. Consulte um profissional de sa√∫de para orienta√ß√µes sobre medicamentos."
    };
  }

  try {
    const defaultOptions = {
      modelName: "gemini-2.0-flash-exp",
      maxOutputTokens: 1000,
      temperature: 0.7,
      topP: 0.9,
      topK: 40,
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const finalOptions = { ...defaultOptions, ...options };

    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({
      model: finalOptions.modelName,
      generationConfig: {
        maxOutputTokens: finalOptions.maxOutputTokens,
        temperature: finalOptions.temperature,
        topP: finalOptions.topP,
        topK: finalOptions.topK,
      },
      safetySettings: finalOptions.safetySettings
    });

    const systemRules = `Voc√™ √© o TecSim, assistente virtual EXCLUSIVO para quest√µes de sa√∫de. 
DIRETRIZES ABSOLUTAS:

‚õî NUNCA discuta: pol√≠tica, religi√£o, esportes, entretenimento, economia ou qualquer tema fora da sa√∫de
‚õî NUNCA d√™ diagn√≥sticos ou tratamentos espec√≠ficos
‚õî NUNCA mencione medicamentos controlados ou que exigem receita
‚úÖ SEMPRE recomende procurar um m√©dico para quest√µes s√©rias
‚úÖ Mantenha respostas objetivas e focadas apenas em sa√∫de

RESPOSTAS PADR√ÉO PARA TEMA N√ÉO M√âDICO:
Se o usu√°rio mencionar qualquer tema fuera da sa√∫de, responda APENAS e EXCLUSIVAMENTE:
"Sou um assistente virtual especializado em sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos. Para outros temas, recomendo buscar fontes apropriadas."

Para quest√µes de sa√∫de:
- Seja breve e objetivo
- Sempre encerre recomendando consulta m√©dica quando apropriado
- Use linguagem acess√≠vel ao p√∫blico geral
- Nunca substitua orienta√ß√£o profissional`;

    // Sanitizar o hist√≥rico antes de usar
    const historicoSanitizado = sanitizarHistorico(history);
    
    let chatHistory = [];
    if (Array.isArray(historicoSanitizado) && historicoSanitizado.length > 0) {
      chatHistory = historicoSanitizado.map(msg => ({
        role: msg.isBot ? "model" : "user",
        parts: [{ text: msg.text }]
      }));
    }

    const chat = model.startChat({ 
      history: chatHistory
    });

    const userMessageContent = systemRules + "\n\nMensagem do usu√°rio: " + message.trim();

    const result = await chat.sendMessage(userMessageContent);
    const responseText = await result.response.text();

    // üîí Verifica√ß√£o final da resposta do modelo
    if (detectarTemaForaDaSaude(responseText) || validarMencaoMedicamentos(responseText)) {
      console.warn('[AUDIT] Resposta do modelo cont√©m conte√∫do proibido');
      return {
        success: true,
        response: "Sou um assistente virtual especializado em sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos."
      };
    }

    return {
      success: true,
      response: responseText
    };

  } catch (error) {
    console.error("Erro detalhado:", error);

    let errorMessage = "Erro ao processar sua solicita√ß√£o";
    if (error.message?.includes('not found for API version')) {
      errorMessage = "Modelo n√£o dispon√≠vel. Tente usar 'gemini-pro'";
    } else if (error.message?.includes('API key not valid')) {
      errorMessage = "Chave de API inv√°lida. Verifique sua configura√ß√£o.";
    } else if (error.message?.includes('Quota exceeded')) {
      errorMessage = "Limite de requisi√ß√µes excedido. Tente novamente mais tarde.";
    }

    return {
      success: false,
      error: errorMessage,
      details: error.message
    };
  }
};

export const checkAPIHealth = async () => {
  try {
    const modelsResponse = await listAvailableModels();

    if (!modelsResponse.success) {
      return {
        healthy: false,
        message: "Falha ao conectar com a API",
        error: modelsResponse.error
      };
    }

    return {
      healthy: true,
      message: "API operacional",
      models: modelsResponse.models.length
    };
  } catch (error) {
    return {
      healthy: false,
      message: "Erro ao verificar sa√∫de da API",
      error: error.message
    };
  }
};