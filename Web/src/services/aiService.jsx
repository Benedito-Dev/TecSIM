import { GoogleGenerativeAI } from "@google/generative-ai";
import { verificarGatilhoCritico, detectarTemaForaDaSaude, validarMencaoMedicamentos } from '../utils/filters';

// ‚úÖ Configura√ß√£o correta para React puro
const API_KEY = import.meta.env.VITE_GOOGLE_API_KEY;

if (!API_KEY) {
  throw new Error("Chave de API n√£o configurada. Configure a vari√°vel VITE_GOOGLE_API_KEY no arquivo .env");
}

// Cache para modelos dispon√≠veis
let cachedModels = null;
const CACHE_EXPIRATION_MS = 3600000; // 1 hora

// Fun√ß√£o para sanitizar o hist√≥rico de conversa
const sanitizarHistorico = (historico) => {
  if (!Array.isArray(historico)) return [];
  
  return historico.filter(msg => {
    if (msg.isBot) {
      // Remove mensagens do bot que contenham temas proibidos
      return !detectarTemaForaDaSaude(msg.text);
    }
    return true; // Mant√©m todas as mensagens do usu√°rio
  });
};

export const listAvailableModels = async () => {
  try {
    if (cachedModels && (Date.now() - cachedModels.timestamp) < CACHE_EXPIRATION_MS) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true
      };
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${API_KEY}`);

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Erro ao listar modelos:", errorData);
      throw new Error(`Falha ao buscar modelos: ${response.status} - ${errorData.error?.message || 'Erro desconhecido'}`);
    }

    const data = await response.json();

    cachedModels = {
      data: data.models,
      timestamp: Date.now()
    };

    return {
      success: true,
      models: data.models
    };

  } catch (error) {
    console.error("Erro ao listar modelos:", error);

    if (cachedModels) {
      return {
        success: true,
        models: cachedModels.data,
        fromCache: true,
        warning: "Dados podem estar desatualizados devido a erro na requisi√ß√£o"
      };
    }

    return {
      success: false,
      error: error.message || "Erro ao listar modelos dispon√≠veis"
    };
  }
};

export const getAIResponse = async (message, history = [], options = {}) => {
  // Log de auditoria para monitorar tentativas
  console.log(`[AUDIT] Tentativa de mensagem: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}`);

  if (typeof message !== 'string' || message.trim() === '') {
    return {
      success: false,
      error: "A mensagem n√£o pode estar vazia"
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Gatilhos cr√≠ticos
  if (verificarGatilhoCritico(message)) {
    console.warn('[AUDIT] Gatilho cr√≠tico detectado');
    return {
      success: true,
      response: "‚ö†Ô∏è Com base no que voc√™ relatou, √© muito importante que procure imediatamente um m√©dico ou profissional de sa√∫de qualificado."
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Temas fora da sa√∫de
  if (detectarTemaForaDaSaude(message)) {
    console.warn('[AUDIT] Tema proibido detectado:', message);
    return {
      success: true,
      response: "‚ö†Ô∏è Sou um assistente virtual de sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos. Para outros temas, recomendo buscar fontes apropriadas."
    };
  }

  // üîí Filtro de seguran√ßa ‚Äî Medicamentos controlados (apenas contextos perigosos)
  if (validarMencaoMedicamentos(message)) {
    console.warn('[AUDIT] Contexto perigoso com medicamento detectado');
    return {
      success: true,
      response: "‚ö†Ô∏è Para quest√µes sobre medicamentos controlados ou dosagens espec√≠ficas, √© importante consultar um farmac√™utico ou m√©dico. Posso ajudar com informa√ß√µes gerais sobre sa√∫de."
    };
  }

  try {
    const defaultOptions = {
      modelName: "gemini-2.0-flash-exp",
      maxOutputTokens: 1000,
      temperature: 0.7,
      topP: 0.9,
      topK: 40,
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    const finalOptions = { ...defaultOptions, ...options };

    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({
      model: finalOptions.modelName,
      generationConfig: {
        maxOutputTokens: finalOptions.maxOutputTokens,
        temperature: finalOptions.temperature,
        topP: finalOptions.topP,
        topK: finalOptions.topK,
      },
      safetySettings: finalOptions.safetySettings
    });

    const systemRules = `Voc√™ √© o TecSim, assistente virtual amig√°vel especializado em sa√∫de e bem-estar. 
    DIRETRIZES:

    ‚úÖ Seja acolhedor e responda sauda√ß√µes normalmente
    ‚úÖ Ajude com quest√µes gerais de sa√∫de, sintomas leves e orienta√ß√µes b√°sicas
    ‚úÖ Ofere√ßa informa√ß√µes educativas sobre sa√∫de
    ‚úÖ Sempre recomende consulta profissional para quest√µes s√©rias
    ‚õî N√£o d√™ diagn√≥sticos definitivos ou prescri√ß√µes
    ‚õî Evite temas fora da sa√∫de (pol√≠tica, religi√£o, esportes)

    ESTILO DE CONVERSA:
    - Seja natural e acess√≠vel
    - Use emojis quando apropriado
    - Responda sauda√ß√µes de forma amig√°vel
    - Mantenha o foco na sa√∫de mas seja conversacional
    - Encoraje cuidados preventivos e h√°bitos saud√°veis`;

    // Sanitizar o hist√≥rico antes de usar
    const historicoSanitizado = sanitizarHistorico(history);
    
    let chatHistory = [];
    if (Array.isArray(historicoSanitizado) && historicoSanitizado.length > 0) {
      chatHistory = historicoSanitizado.map(msg => ({
        role: msg.isBot ? "model" : "user",
        parts: [{ text: msg.text }]
      }));
    }

    const chat = model.startChat({ 
      history: chatHistory
    });

    const userMessageContent = systemRules + "\n\nMensagem do usu√°rio: " + message.trim();

    const result = await chat.sendMessage(userMessageContent);
    const responseText = await result.response.text();

    // üîí Verifica√ß√£o final da resposta do modelo
    if (detectarTemaForaDaSaude(responseText) || validarMencaoMedicamentos(responseText)) {
      console.warn('[AUDIT] Resposta do modelo cont√©m conte√∫do proibido');
      return {
        success: true,
        response: "Sou um assistente virtual especializado em sa√∫de e s√≥ posso responder perguntas relacionadas a cuidados m√©dicos."
      };
    }

    return {
      success: true,
      response: responseText
    };

  } catch (error) {
    console.error("Erro detalhado:", error);

    let errorMessage = "Erro ao processar sua solicita√ß√£o";
    if (error.message?.includes('not found for API version')) {
      errorMessage = "Modelo n√£o dispon√≠vel. Tente usar 'gemini-pro'";
    } else if (error.message?.includes('API key not valid')) {
      errorMessage = "Chave de API inv√°lida. Verifique sua configura√ß√£o.";
    } else if (error.message?.includes('Quota exceeded')) {
      errorMessage = "Limite de requisi√ß√µes excedido. Tente novamente mais tarde.";
    }

    return {
      success: false,
      error: errorMessage,
      details: error.message
    };
  }
};

export const checkAPIHealth = async () => {
  try {
    const modelsResponse = await listAvailableModels();

    if (!modelsResponse.success) {
      return {
        healthy: false,
        message: "Falha ao conectar com a API",
        error: modelsResponse.error
      };
    }

    return {
      healthy: true,
      message: "API operacional",
      models: modelsResponse.models.length
    };
  } catch (error) {
    return {
      healthy: false,
      message: "Erro ao verificar sa√∫de da API",
      error: error.message
    };
  }
};

// Fun√ß√£o espec√≠fica para triagem
export const getTriageResponse = async (message, triagemState, history = []) => {
  const protocolo = triagemState.protocoloAtivo;
  
  if (!protocolo) {
    return {
      success: false,
      error: "Protocolo de triagem n√£o identificado"
    };
  }

  // Prepara contexto especializado para triagem
  const systemRulesTriagem = `
Voc√™ √© um assistente de TRIAGEM m√©dica para farmac√™uticos.

CONTEXTO ATUAL:
- Protocolo: ${protocolo.nome}
- Etapa: ${triagemState.etapa}
- Perguntas realizadas: ${triagemState.perguntasRealizadas}
- Risco atual: ${triagemState.risco}

DIRETRIZES:
- Fa√ßa APENAS 1 pergunta por vez
- Foque em identificar sinais de alerta
- Use linguagem clara e acess√≠vel
- Mantenha o foco no protocolo atual

PR√ìXIMA PERGUNTA DO PROTOCOLO: "${protocolo.perguntas[triagemState.perguntasRealizadas]?.pergunta}"

RESPONDA APENAS COM:
1. A pr√≥xima pergunta do protocolo OU
2. A classifica√ß√£o final se todas as perguntas foram respondidas

NUNCA d√™ diagn√≥sticos ou tratamentos.
  `;

  try {
    const result = await getAIResponse(systemRulesTriagem + "\n\nHist√≥rico: " + message, history, {
      temperature: 0.2, // Baixa criatividade para maior precis√£o
      maxOutputTokens: 300
    });

    return result;
  } catch (error) {
    console.error('Erro na triagem:', error);
    return {
      success: false,
      error: "Falha na triagem autom√°tica"
    };
  }
};

// Fun√ß√£o para an√°lise final da triagem
export const getTriageAnalysis = async (triagemState) => {
  const classificacao = classificarTriagemFinal(triagemState);
  
  const analysisPrompt = `
Com base na triagem realizada, forne√ßa um resumo profissional:

PROTOCOLO: ${triagemState.protocoloAtivo.nome}
RESPOSTAS COLETADAS: ${JSON.stringify(triagemState.historicoRespostas)}
CLASSIFICA√á√ÉO: ${classificacao.nivel}

Forne√ßa um resumo conciso para o farmac√™utico com:
1. Principais achados
2. Sinais de alerta identificados
3. Recomenda√ß√£o de encaminhamento

Mantenha o texto objetivo e profissional.
  `;

  const result = await getAIResponse(analysisPrompt, [], {
    temperature: 0.3,
    maxOutputTokens: 500
  });

  return {
    ...result,
    classificacao
  };
};